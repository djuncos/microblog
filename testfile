 Post.find(8).update_attributes(user_id: 1)




<ul>
<% @posts.each do |post| %>
  <li>
    <h2><a href="/posts/<%= post.id %>"><%= post.title %></a>
    <span><%= pretty_date(post.created_at) %></span>

    </h2>
  </li>
<% end %>
</ul>

<ul>
	<% @users.each do |user| %>
			<li><%= user.username %></li>
		<% end %>



</ul>



old main

require "sinatra"
require "sinatra/activerecord"
require "sinatra/flash"
require "./models"


set :database, "sqlite3:test.sqlite3"

enable :sessions




post '/sign-in' do
  puts "my params are" + params.inspect   
  @user = User.where(username: params[:username]).first   
  if @user.password == params[:password]     
    redirect '/'  
  else     
    redirect '/login-failed'   
  end 
end

# Get all of our routes


post "/" do

  @user = User.where(username: params[:username]).first
  session[:user_id] = @user.id

end

get "/" do
  # @posts = Post.order("created_at DESC")
  # @users=User.all
  # @user = User.where(username: params[:username]).first
  # session[:user_id] = @user.id
  
  erb :"posts/index"
end


# Get the New Post form
get "/posts/new" do
  @title = "New Post"
  @post = Post.new
  erb :"posts/new"
end


get '/sign-in' do
  erb :"sign-in"
end

# post '/sessions/new' do
 
#     @user = User.where(username: params[:username]).first
#     if @user.password == params[:password]
#       session[:user_id] = @user.id
#       flash[:notice] = "You've successfully signed in."
#       redirect '/'   
#     else
#       erb :"pages/login-failed"
#     end

# end

def current_user     
  if session[:user_id]       
    @current_user = User.find(session[:user_id])     
  end   
end

get '/sign-out' do
  session.clear
  flash[:notice] = "You've successfully signed out."
    redirect '/'

end


# post '/sign-in' do
#   @user = User.where(username: params[:username]).first
#   if @user.password == params[:password]
#     redirect '/'   
#   else     
#     # redirect '/pages/login-failed'
#     erb :"pages/login-failed"
#   end 
# end

# The New Post form sends a POST request (storing data) here
# where we try to create the post it sent in its params hash.
# If successful, redirect to that post. Otherwise, render the "posts/new"
# template where the @post object will have the incomplete data that the 
# user can modify and resubmit.
post "/posts" do
  @post = Post.new(params[:post])
  if @post.save
    redirect "posts/#{@post.id}"
  else
    erb :"posts/new"
  end
end

# Get the individual page of the post with this ID.
get "/posts/:id" do
  @post = Post.find(params[:id])
  @title = @post.title
  erb :"posts/show"
end

# Get the Edit Post form of the post with this ID.
get "/posts/:id/edit" do
  @post = Post.find(params[:id])
  @title = "Edit Form"
  erb :"posts/edit"
end

# The Edit Post form sends a PUT request (modifying data) here.
# If the post is updated successfully, redirect to it. Otherwise,
# render the edit form again with the failed @post object still in memory
# so they can retry.
put "/posts/:id" do
  @post = Post.find(params[:id])
  if @post.update_attributes(params[:post])
    redirect "/posts/#{@post.id}"
  else
    erb :"posts/edit"
  end
end

# Deletes the post with this ID and redirects to homepage.
delete "/posts/:id" do
  @post = Post.find(params[:id]).destroy
  redirect "/"
end

# Our About Me page.
get "/about" do
  @title = "About Me"
  erb :"pages/about"
end




helpers do
  # If @title is assigned, add it to the page's title.
  def title
    if @title
      "#{@title} -- My Blog"
    else
      "My Blog"
    end
  end

  # Format the Ruby Time object returned from a post's created_at method
  # into a string that looks like this: 06 Jan 2012
  def pretty_date(time)
   time.strftime("%d %b %Y")
  end


  def post_show_page?
    request.path_info =~ /\/posts\/\d+$/
  end

  def delete_post_button(post_id)
    erb :_delete_post_button, locals: { post_id: post_id}
  end

end

